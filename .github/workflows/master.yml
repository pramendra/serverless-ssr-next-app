name: CICD on branch
on:
  push:
    branches:
      - master
      - dev
jobs:
  set_var:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.18.1]
    outputs:
      BRANCH_NAME: ${{ steps.step1.outputs.BRANCH_NAME }}
      BASE_PATH: ${{ steps.step2.outputs.BASE_PATH }}
    name: set app variable ${{ matrix.node-version }}
    steps:
      - id: step1
        run: echo "::set-output name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
      - id: step2
        run: echo "::set-output name=BASE_PATH::/${{secrets.SERVICE_NAME}}-${{ steps.step1.outputs.BRANCH_NAME }}-${{secrets.SERVICE_NAME_FUNCTION}}"
  test:
    needs: set_var
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.18.1]
    name: Setup, test & lint ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Installing dependencies
        run: npm install

      - name: Running tests
        run: npm run test

      - name: Running lints
        run: npm run lint

  deploy:
    needs: [set_var, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.18.1]
    name: deploying using ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Installing dependencies
        run: npm install
      - name: Build app
        run: npm run build
        env:
          BASE_PATH: /${{secrets.SERVICE_NAME}}-${{needs.set_var.outputs.BRANCH_NAME}}-${{secrets.SERVICE_NAME_FUNCTION}}
          PRISMIC_ACCESS_TOKEN: ${{secrets.PRISMIC_ACCESS_TOKEN}}
          PRISMIC_GRAPHQL_URI: ${{secrets.PRISMIC_GRAPHQL_URI}}
          PRISMIC_WEBHOOK_SECRET: ${{secrets.PRISMIC_WEBHOOK_SECRET}}
      - name: Deploy function
        run: |
          echo -n ${{ secrets.GCP_SA_KEY }} | base64 --decode > $CREDENTIALS_PATH
          npx serverless deploy --stage=${{needs.set_var.outputs.BRANCH_NAME}}
        env:
          CREDENTIALS_PATH: ./keyfile.json
          BASE_PATH: /${{secrets.SERVICE_NAME}}-${{needs.set_var.outputs.BRANCH_NAME}}-${{secrets.SERVICE_NAME_FUNCTION}}
          GCP_PROJECT: ${{secrets.GCP_PROJECT}}
          GCP_REGION: ${{secrets.GCP_REGION}}
          SERVICE_NAME: ${{secrets.SERVICE_NAME}}
          PRISMIC_ACCESS_TOKEN: ${{secrets.PRISMIC_ACCESS_TOKEN}}
          PRISMIC_GRAPHQL_URI: ${{secrets.PRISMIC_GRAPHQL_URI}}
          PRISMIC_WEBHOOK_SECRET: ${{secrets.PRISMIC_WEBHOOK_SECRET}}
  deploy_public:
    needs: [set_var, deploy]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.18.1]
    name: make deployment public using ${{ matrix.node-version }}
    steps:
      - name: Authenticate into Google Cloud Platform
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '276.0.0'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Make function public
        run: |
          gcloud functions add-iam-policy-binding ${{secrets.SERVICE_NAME}}-${{needs.set_var.outputs.BRANCH_NAME}}-${{secrets.SERVICE_NAME_FUNCTION}} \
          --member="allUsers" \
          --role="roles/cloudfunctions.invoker" \
          --project ${{ secrets.GCP_PROJECT }} \
          --region ${{ secrets.GCP_REGION }}
